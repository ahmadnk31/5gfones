"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import { createClient } from "@/lib/supabase/client";
import { Pencil, User, PhoneCall, Mail, MapPin, FileText, Clock, Package, CreditCard } from "lucide-react";
import { useTranslations } from "next-intl";
import Image from "next/image";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";

interface CustomerInfoProps {
  username: string;
  roomName: string;
}

export const CustomerInfo = ({ username, roomName }: CustomerInfoProps) => {
  const t = useTranslations("customerSupport");

  const [customerData, setCustomerData] = useState<{
    name: string;
    email: string;
    phone: string;
    address: string;
    notes: string;
    joinDate?: string;
    totalOrders?: number;
    totalSpent?: number;
    lastPurchase?: string;
  }>({
    name: username,
    email: `${username.toLowerCase().replace(/\s+/g, "")}@example.com`,
    phone: "+1 (555) 123-4567",
    address: "123 Main Street, Anytown, USA 12345",
    notes: t("customerInfo.loyalCustomer"),
    joinDate: "2023-01-15",
    totalOrders: 8,
    totalSpent: 1240.50,
    lastPurchase: "2023-04-22",
  });
  
  const [isEditing, setIsEditing] = useState(false);
  const [editedNotes, setEditedNotes] = useState(customerData.notes);
  const [activeTab, setActiveTab] = useState("details");
  useEffect(() => {
    // In a real application, you would fetch customer data from your database
    const fetchCustomerData = async () => {
      try {
        const supabase = createClient();

        // Example query to get customer data based on username
        // This would be replaced with your actual data model
        const { data, error } = await supabase
          .from("profiles")
          .select("full_name, email, phone, address, meta, created_at")
          .ilike("full_name", `%${username}%`)
          .single();

        if (data) {
          // Get order data
          const { data: orderData } = await supabase
            .from("orders")
            .select("id, created_at, total")
            .eq("user_id", data.id)
            .order("created_at", { ascending: false });
          
          const totalOrders = orderData?.length || 0;
          const totalSpent = orderData?.reduce((sum, order) => sum + (order.total || 0), 0) || 0;
          const lastPurchase = orderData && orderData.length > 0 ? orderData[0].created_at : null;
          
          setCustomerData({
            name: data.full_name || username,
            email: data.email || customerData.email,
            phone: data.phone || customerData.phone,
            address: data.address || customerData.address,
            notes: data.meta?.notes || customerData.notes,
            joinDate: data.created_at,
            totalOrders,
            totalSpent,
            lastPurchase,
          });
          setEditedNotes(data.meta?.notes || customerData.notes);
        }
      } catch (error) {
        console.error("Error fetching customer data:", error);
      }
    };

    if (
      username &&
      username !== "Admin Support" &&
      !username.includes("Admin")
    ) {
      fetchCustomerData();
    }
  }, [
    username,
    roomName,
    customerData.email,
    customerData.phone,
    customerData.address,
    customerData.notes,
  ]);

  const saveNotes = async () => {
    try {
      const supabase = createClient();

      // In a real application, you would save notes to your database
      // Example:
      // const { error } = await supabase
      //   .from("customer_notes")
      //   .upsert({
      //     username: username,
      //     room_name: roomName,
      //     notes: editedNotes,
      //   });

      setCustomerData((prev) => ({
        ...prev,
        notes: editedNotes,
      }));

      setIsEditing(false);
    } catch (error) {
      console.error("Error saving notes:", error);
    }
  };

  return (
    <div className='w-full h-full bg-background border-l border-border'>
      {" "}
      <div className='p-4'>
        <div className='flex items-center justify-between mb-6'>
          <h2 className='text-lg font-semibold'>{t("customerInfo.title")}</h2>
          <Button
            variant='ghost'
            size='sm'
            className='h-8 w-8 p-0'
            onClick={() =>
              (window.location.href = `/admin/customers/edit?username=${username}`)
            }
          >
            <span className='sr-only'>{t("customerInfo.editInfo")}</span>
            <Pencil className='h-4 w-4' />
          </Button>
        </div>

        <div className='space-y-6'>
          <div className='flex items-center space-x-4'>
            <div className='w-12 h-12 rounded-full bg-primary-foreground flex items-center justify-center text-lg font-semibold'>
              {username.charAt(0).toUpperCase()}
            </div>
            <div>
              <h3 className='font-medium'>{customerData.name}</h3>
              <p className='text-sm text-muted-foreground'>
                {customerData.email}
              </p>
            </div>
          </div>
          <div className='space-y-2'>
            <div>
              <h4 className='text-sm font-medium text-muted-foreground'>
                {t("customerInfo.phoneNumber")}
              </h4>
              <p className='text-sm'>{customerData.phone}</p>
            </div>

            <div>
              <h4 className='text-sm font-medium text-muted-foreground'>
                {t("customerInfo.email")}
              </h4>
              <p className='text-sm'>{customerData.email}</p>
            </div>

            <div>
              <h4 className='text-sm font-medium text-muted-foreground'>
                {t("customerInfo.address")}
              </h4>
              <p className='text-sm'>{customerData.address}</p>
            </div>
          </div>
          <div>
            <div className='flex items-center justify-between mb-1'>
              <h4 className='text-sm font-medium text-muted-foreground'>
                {t("customerInfo.notes")}
              </h4>
              {!isEditing ? (
                <Button
                  variant='ghost'
                  size='sm'
                  className='h-6 text-xs'
                  onClick={() => setIsEditing(true)}
                >
                  {t("customerInfo.edit")}
                </Button>
              ) : (
                <div className='flex space-x-1'>
                  <Button
                    variant='ghost'
                    size='sm'
                    className='h-6 text-xs'
                    onClick={() => {
                      setIsEditing(false);
                      setEditedNotes(customerData.notes);
                    }}
                  >
                    {t("customerInfo.cancel")}
                  </Button>
                  <Button
                    variant='default'
                    size='sm'
                    className='h-6 text-xs'
                    onClick={saveNotes}
                  >
                    {t("customerInfo.save")}
                  </Button>
                </div>
              )}
            </div>

            {!isEditing ? (
              <p className='text-sm'>{customerData.notes}</p>
            ) : (
              <textarea
                className='w-full p-2 text-sm border border-border rounded-md min-h-[100px]'
                value={editedNotes}
                onChange={(e) => setEditedNotes(e.target.value)}
              />
            )}
          </div>
        </div>
      </div>
    </div>
  );
};
